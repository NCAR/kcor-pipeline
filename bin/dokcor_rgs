#!/opt/local/bin/perl
#-------------------------------------------------------------------------------
# dokcor_rgs
#-------------------------------------------------------------------------------
# Apply normalized radially-graded filter to kcor L1 images. 
#-------------------------------------------------------------------------------
# Andrew L. Stanger   HAO/NCAR  23 Apr 2015
# 28 Jan 2016 Adapted from "dokcor_nrgfs"
#-------------------------------------------------------------------------------
# usage: dokcor_rgs  yyyymmdd  fits_list
# yyyy = year, mm = month, dd=day of month.
# fits_list = name of file containing a list of OK L1 fits images.
#-------------------------------------------------------------------------------

use File::Copy ;
use Cwd ;

print ("kcor_rgs  @ARGV\n") ;

#system ("echo 'IDL_DEVICE: '; printenv IDL_DEVICE\n") ;

$numargs = @ARGV ;

if ($numargs != 2)
   {
   print ("Usage: dokcor_rgs  yyyymmdd  l1_list\n") ;
   print ("yyyy: year   mm: month   dd: day of month\n") ;
   print ("l1_list: name of file containing a list of L1 kcor fits images.\n") ;
   exit (1) ;
   }

#------------------------------------------------
# Get date parameter (yyyymmdd) & fits list file.
#------------------------------------------------

$date    = $ARGV[0] ;
$l1_list = $ARGV[1] ;

#-------------------------------------------------------------------------------
# Get current date & time.
#-------------------------------------------------------------------------------

my ($csec,$cmin,$chour,$cmday,$cmon,$cyear,$cwday,$cyday,$isdst)
= localtime (time) ;
my @month_name = qw (Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec) ;
$cyear += 1900 ;
$cmonth = $cmon + 1 ;

my $datenow = sprintf ("%04d-%02d-%02d", $cyear, $cmonth, $cmday) ;
my $timenow = sprintf ("%02d:%02d:%02d", $chour, $cmin, $csec) ;

#-------------------------------------------------------------------------------
# Define directory path names.
#-------------------------------------------------------------------------------

$date_dir = "/hao/mlsodata1/Data/KCor/raw/$date" ;	# kcor yyyymmdd dir
$l1_dir   = "$date_dir/level1";				# kcor level0   dir

$log_file = "$date" . "_dokcor_rgs.log" ;
$log_path = $l1_dir . '/' . $log_file ;

my $orig_dir = getcwd ;		# save original directory.

#--- Check existence of date directory.

if (! -d $date_dir)
   {
   die "Directory $date_dir does not exist. $!\n" ;
   }

#--- Check existence of level1 directory.

if (! -d $l1_dir)
   {
   die "Directory $l1_dir does not exist. $!\n" ;
   }

#-------------------------------------------------------------------------------
# Open log file.
#-------------------------------------------------------------------------------

open  (LOG, ">$log_path") ;
print (    "dokcor_rgs  $date  $l1_list --- $datenow $timenow\n") ;
print (LOG "dokcor_rgs  $date  $l1_list --- $datenow $timenow\n") ;

#-------------------------------------------------------------------------------
# Move to "level1" directory.
#-------------------------------------------------------------------------------

chdir ($l1_dir) ;

#--- Check for existence of L1 fits files.
#    If such files do NOT exist, then quit.

opendir DATA, $l1_dir ;
@allfiles = readdir DATA ;
closedir DATA ;

@fits_files = grep {/kcor_l1.fts/} @allfiles ;
@l1_fits_files = sort @fits_files ;
chomp ($l1_fits_files) ;

my $fsize = @l1_fits_files ;
if ($fsize == 0)
   {
   print (    "No L1 fits files exist in $l1_dir.\n");
   print (LOG "No L1 fits files exist in $l1_dir.\n");
   goto DONE ;
   }

#----------------------------------------------------
# Execute the IDL procedure to create RG gif files.
#----------------------------------------------------

$list_size = -s $l1_list ;

if ($list_size != 0)
   {
   $idlfile = 'idl_rgs' ;
   open (IDLCMD, ">$idlfile") or die "Unable to open $idlfile $!" ;
   print (       "kcor_rgs, '$l1_list'\n") ;
   print (LOG    "kcor_rgs, '$l1_list'\n") ;
   print (IDLCMD "kcor_rgs, '$l1_list'\n") ;
   close (IDLCMD) ;

   system ("/opt/share/exelis/idl/bin/idl -IDL_STARTUP '' < $idlfile\n") == 0
      or die "system (idl -IDL_STARTUP '' < $idlfile) failed: $?" ;

   unlink ($idlfile) ;	# Remove IDL command file.
   }
else
   {
   unlink $l1_list ;	# Remove zero-length L1 list file.
   }

#--------------------------
# Close log file & finish.
#--------------------------

DONE:
print (    "*** dokcor_rgs done ***\n") ;
print (LOG "*** dokcor_rgs done ***\n") ;
close (LOG) ;

chdir ($orig_dir) ;		# Return to original directory.
