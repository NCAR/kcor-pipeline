#!/usr/bin/env python

import argparse
import os
import socket
import subprocess
import sys
import time

PY3 = sys.version_info[0] == 3

if PY3:
    import configparser
else:
    import ConfigParser as configparser


if __name__ == '__main__':
    name = 'Realtime KCor pipeline simulator @VERSION@'

    parser = argparse.ArgumentParser(description=name)
    config_flags_help = '''FLAGS section of config filename'''
    date_help = '''date to run on'''
    parser.add_argument('date', type=str, help=date_help)
    parser.add_argument('-f', '--flags',
                        type=str,
                        default='latest',
                        help='''FLAGS section of config filename, i.e., file in
                                config/ directory matching kcor.user.machine.FLAGS.cfg
                                will be used''')
    parser.add_argument('--no-eod',
                        action='store_true',
                        help='set to not launch end-of-day processing')
    parser.add_argument('-v', '--version',
                        action='version',
                        version=name)

    args = parser.parse_args()

    # read config file to get options
    pipeline_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

    userhome = os.path.expanduser('~')
    username = os.path.split(userhome)[-1]
    machine = socket.gethostname().split('.')[0]

    config_basename = 'kcor.%s.%s.%s.cfg' % (username, machine, args.flags)

    # construct config file filename
    config_filename = os.path.join(pipeline_dir, 'config', config_basename)

    # read config file to get arguments to launch data/processing simulators
    config = configparser.ConfigParser()
    config.read(config_filename)

    depot_basedir = config.get('testing', 'depot_dir')

    raw_basedir = config.get('processing', 'raw_basedir')
    raw_dir = os.path.join(raw_basedir, args.date)

    frequency = config.get('testing', 'frequency')
    batch_time = config.get('testing', 'batch_time')

    # launch processing simulator
    processing_cmd = [os.path.join(pipeline_dir, 'bin', 'kcor_simulate_processing'),
                      '-f', args.flags,
                      '--frequency', frequency,
                      args.date]
    if args.no_eod:
        processing_cmd.insert(2, '--no-eod')
    processing_process = subprocess.Popen(processing_cmd)

    # launch incoming data simulator
    data_cmd = [os.path.join(pipeline_dir, 'bin', 'kcor_simulate_data'),
                '-r', raw_dir,
                '-b', batch_time,
                os.path.join(depot_basedir, args.date)]
    data_process = subprocess.Popen(data_cmd)

    try:
        while True:
            time.sleep(1.0)
    except KeyboardInterrupt:
        print('killing data (%d) and processing (%d) subprocesses...' % (data_process.pid, processing_process.pid))
        processing_process.kill()
        data_process.kill()

