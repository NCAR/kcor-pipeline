#!/usr/bin/env python

import argparse
import logging
import os
import subprocess
import time

# wait after RT pipeline is launched to launch EOD pipeline
EOD_WAIT = 30.0   # seconds


# setup the logging mechanism
logging.basicConfig(format='%(asctime)s %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S',
                    level=logging.DEBUG)


def launch_loop(date, config_flags, frequency, no_eod):
    logging.info('starting KCor realtime runner...')
    logging.info('config flags  : %s', config_flags)
    logging.info('frequency     : %0.1f secs', frequency)

    pipeline_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

    realtime_cmd = [os.path.join(pipeline_dir, 'bin', 'runkcor_rt.sh'),
                    config_flags,
                    date]
    eod_cmd = [os.path.join(pipeline_dir, 'bin', 'runkcor_eod.sh'),
               config_flags,
               date]

    while True:
        logging.info(' '.join(realtime_cmd))
        realtime_pid = subprocess.Popen(realtime_cmd).pid
        logging.info('launched KCor realtime pipeline with pid %d', realtime_pid)
        time.sleep(EOD_WAIT)
        if not no_eod:
            logging.info(' '.join(eod_cmd))
            eod_pid = subprocess.Popen(eod_cmd).pid
            logging.info('launched KCor end-of-day pipeline with pid %d', eod_pid)
            time.sleep(frequency - EOD_WAIT)


if __name__ == '__main__':
    name = 'Realtime KCor pipeline processing simulator @GIT_VERSION@ [@GIT_REVISION@] (@GIT_BRANCH@)'

    parser = argparse.ArgumentParser(description=name)
    config_flags_help = '''FLAGS section of config filename'''
    date_help = '''date to run on'''
    parser.add_argument('date', type=str, help=date_help)
    parser.add_argument('-f', '--flags',
                        type=str,
                        default='latest',
                        help='''FLAGS section of config filename, i.e., file in
                                config/ directory matching kcor.FLAGS.cfg will
                                be used''')
    frequency_help = '''number of seconds between launches of realtime
                        pipeline, default is 60.0 seconds'''
    parser.add_argument('--frequency',
                        type=float,
                        help=frequency_help,
                        default=60.0)
    parser.add_argument('--no-eod',
                        action='store_true',
                        help='set to not launch end-of-day processing')
    parser.add_argument('-v', '--version',
                        action='version',
                        version=name)
    args = parser.parse_args()

    try:
        launch_loop(args.date, args.flags, args.frequency, args.no_eod)
    except KeyboardInterrupt:
        logging.info('quitting...')
