#!/usr/bin/env python

import argparse
import datetime
import logging
import os
import subprocess
import time

# wait between pipeline launches
INTERPROCESS_WAIT = 5.0   # seconds

CONFIG_DIR = "@CONFIG_DIR@"


# setup the logging mechanism
logging.basicConfig(format='%(asctime)s %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S',
                    level=logging.DEBUG)



def get_config_filename(flags):
    config_basename = f"kcor.{flags}.cfg"

    # construct config file filename
    config_filename = os.path.join(CONFIG_DIR, config_basename)

    return(config_filename)


def launch_loop(date, config_flags, rt_frequency, eod_frequency, no_eod):
    logging.info('starting KCor realtime runner...')
    logging.info('config flags  : %s', config_flags)
    logging.info('rt frequency  : %0.1f secs', rt_frequency)
    logging.info('eod frequency : %0.1f secs', eod_frequency)

    pipeline_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

    realtime_cmd = [os.path.join(pipeline_dir, 'bin', 'runkcor_rt.sh'),
                    get_config_filename(config_flags),
                    date]
    eod_cmd = [os.path.join(pipeline_dir, 'bin', 'runkcor_eod.sh'),
               get_config_filename(config_flags),
               date]

    last_rt_time = datetime.datetime.now()
    last_eod_time = datetime.datetime.now()
    while True:
        now = datetime.datetime.now()
        if (now - last_rt_time).seconds > rt_frequency:
            last_rt_time = now
            realtime_pid = subprocess.Popen(realtime_cmd,
                                            stdout=subprocess.DEVNULL,
                                            stderr=subprocess.DEVNULL).pid
            logging.info(f"launched KCor realtime pipeline with pid {realtime_pid}")
            time.sleep(INTERPROCESS_WAIT)

        now = datetime.datetime.now()
        if not no_eod and ((now - last_eod_time).seconds > eod_frequency):
            last_eod_time = now
            eod_pid = subprocess.Popen(eod_cmd,
                                       stdout=subprocess.DEVNULL,
                                       stderr=subprocess.DEVNULL).pid
            logging.info(f"launched KCor end-of-day pipeline with pid {eod_pid}")
            time.sleep(INTERPROCESS_WAIT)


if __name__ == '__main__':
    name = 'Realtime KCor pipeline processing simulator @GIT_VERSION@ [@GIT_REVISION@] (@GIT_BRANCH@)'

    parser = argparse.ArgumentParser(description=name)
    config_flags_help = '''FLAGS section of config filename'''
    date_help = '''date to run on'''
    parser.add_argument('date', type=str, help=date_help)
    parser.add_argument('-f', '--flags',
                        type=str,
                        default='latest',
                        help='''FLAGS section of config filename, i.e., file in
                                config/ directory matching kcor.FLAGS.cfg will
                                be used''')
    rt_frequency_help = '''number of seconds between launches of realtime
                           pipeline, default is 60.0 seconds'''
    eod_frequency_help = '''number of seconds between launches of end-of-day
                            pipeline, default is 60.0 seconds'''
    parser.add_argument('--rt-frequency',
                        type=float,
                        help=rt_frequency_help,
                        default=60.0)
    parser.add_argument('--eod-frequency',
                        type=float,
                        help=eod_frequency_help,
                        default=900.0)
    parser.add_argument('--no-eod',
                        action='store_true',
                        help='set to not launch end-of-day processing')
    parser.add_argument('-v', '--version',
                        action='version',
                        version=name)
    args = parser.parse_args()

    try:
        launch_loop(args.date, args.flags,
                    args.rt_frequency,
                    args.eod_frequency, args.no_eod)
    except KeyboardInterrupt:
        logging.info('quitting...')
