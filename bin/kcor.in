#!/usr/bin/env python

import argparse
import os
import subprocess


DEVNULL = open(os.devnull, 'w')
PIPELINE_DIR = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))


def wait_for(process):
    try:
        process.wait()
        return 0
    except KeyboardInterrupt:
        print('killing process %d' % process.pid)
        process.kill()
        return 1


def calibrate_list(filelist, dates, flags, no_wait):
    if dates.find(',') or dates.find('-'):
        print('only a single date allowed when using a cal list')
        return

    cmd = [os.path.join(PIPELINE_DIR, 'bin', 'runkcor_calibrate_list.sh'),
           filelist,
           dates,
           flags]

    process = subprocess.Popen(cmd, stdout=DEVNULL, stderr=DEVNULL)
    print('[%d] %s' % (process.pid, ' '.join(cmd)))
            
    if not no_wait:
        terminated = wait_for(process)


def calibrate_dates(dates, flags, no_wait):
    for d in dates.split(','):
        if d.find('-') < 0:
            cmd = [os.path.join(PIPELINE_DIR, 'bin', 'runkcor_calibrate.sh'),
                   d,
                   flags]

            process = subprocess.Popen(cmd, stdout=DEVNULL, stderr=DEVNULL)
            print('[%d] %s' % (process.pid, ' '.join(cmd)))
            
            if not no_wait:
                terminated = wait_for(process)
                if terminated: break
        else:
            r = d.split('-')
            cmd = [os.path.join(PIPELINE_DIR, 'bin', 'runkcor_calibrate_range.sh'),
                   r[0], r[1],
                   flags]

            process = subprocess.Popen(cmd, stdout=DEVNULL, stderr=DEVNULL)
            print('[%d] %s' % (process.pid, ' '.join(cmd)))
            if not no_wait:
                terminated = wait_for(process)
                if terminated: break


def process_dates(dates, flags, no_wait):
    for d in dates.split(','):
        if d.find('-') < 0:
            cmd = [os.path.join(PIPELINE_DIR,
                                'bin', 
                                'runkcor_process.sh'),
                   d,
                   flags]

            process = subprocess.Popen(cmd, stdout=DEVNULL, stderr=DEVNULL)
            print('[%d] %s' % (process.pid, ' '.join(cmd)))
            if not no_wait:
                terminated = wait_for(process)
                if terminated: break
        else:
            r = d.split('-')
            script = 'runkcor_process_range.sh'
            cmd = [os.path.join(PIPELINE_DIR, 'bin', script),
                   r[0], r[1],
                   flags]

            process = subprocess.Popen(cmd, stdout=DEVNULL, stderr=DEVNULL)
            print('[%d] %s' % (process.pid, ' '.join(cmd)))
            if not no_wait:
                terminated = wait_for(process)
                if terminated: break


if __name__ == '__main__':
    name = 'KCor pipeline @VERSION@'

    parser = argparse.ArgumentParser(description=name)

    date_help = '''Dates to run on in the form YYYYMMDD including lists (using
                   commas) and ranges (using hyphens). Note that the beginning
                   of a range is inclusive and the end is exclusive. For
                   example, '20170101-20170201' represents all of January 2017,
                   '20170201,20170202' represents the first two days of February
                   2017, and '20170101-20170201,20170201,20170202' represents
                   all of January and the first two days of February 2017.
                '''
    parser.add_argument('dates', type=str, nargs='+', help=date_help)

    parser.add_argument('-f', '--flags',
                        type=str,
                        default='latest',
                        help='''FLAGS section of config filename, i.e., file in
                                config/ directory matching kcor.user.machine.FLAGS.cfg
                                will be used''')

    parser.add_argument('--no-wait',
                        action='store_true',
                        help='set to run all dates simultaneously')

    parser.add_argument('--cal-list',
                        type=str,
                        metavar='FILENAME',
                        help='''set to a filename containing a list of files
                                to use to produce the calibration''')

    parser.add_argument('-c', '--calibrate',
                        action='store_true',
                        help='set to just produce calibration')

    parser.add_argument('-v', '--version',
                        action='version',
                        version=name)

    args = parser.parse_args()

    dates = ''.join(args.dates)

    if args.calibrate or args.cal_list:
        if args.cal_list:
            calibrate_list(args.cal_list, dates, args.flags, args.no_wait)
        else:
            calibrate_dates(dates, args.flags, args.no_wait)
    else:
        process_dates(dates, args.flags, args.no_wait)
