#!/usr/bin/env python

import argparse
import datetime
import logging
import os
import re
import shutil
import time


KCOR_L0_RE = '^\d{8}_\d{6}_kcor\.fts\.gz$'
KCOR_LOG_RE = '^\d{8}\.kcor\.t\d\.log$'

DOWNLOAD_TIME = 3.0  # in seconds


# setup the logging mechanism
logging.basicConfig(format='%(asctime)s %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S',
                    level=logging.DEBUG)


def decompose_filename(f):
    parts = [f[0:4], f[4:6], f[6:8], f[9:11], f[11:13], f[13:15]]
    return tuple(int(p) for p in parts)


def catalog_archive(archive_dir):
    '''KCor raw data filenames look like "0170131_022253_kcor.fts"'''
    files = os.listdir(archive_dir)
    l0_re = re.compile(KCOR_L0_RE)
    log_re = re.compile(KCOR_LOG_RE)
    data_files = [f for f in files if l0_re.match(f)]
    dates = [datetime.datetime(*decompose_filename(f)) for f in data_files]
    logs = [f for f in files if log_re.match(f)]
    return [{'filename': f, 'date': d} for f, d in zip(data_files, dates)], logs


def download_loop(archive_dir, raw_dir, batch_time):
    logging.info('starting KCor realtime simulator...')
    logging.info('archive directory : %s', archive_dir)
    logging.info('raw directory     : %s', raw_dir)
    logging.info('batch time        : %d minutes', batch_time)
    logging.info('download time     : %0.1f seconds', DOWNLOAD_TIME)

    start_time = datetime.datetime.now()
    catalog, logs = catalog_archive(archive_dir)
    delta = start_time - catalog[0]['date'] - datetime.timedelta(minutes=batch_time)

    logging.info('%d files in archive...', len(catalog))
    logging.info('%s to %s (duration: %s)',
                 catalog[0]['date'],
                 catalog[-1]['date'],
                 catalog[-1]['date'] - catalog[0]['date'])

    if not len(logs) == 2:
        logging.error('%d t1/t2 logs present, exiting...', len(logs))
        return

    while True:
        # copy files before now - delta that are still in catalog
        now = datetime.datetime.now()
        d = catalog[0]['date']
        while catalog and d < now - delta:
            c = catalog.pop(0)
            d = None if not catalog else catalog[0]['date']
            logging.info('copying %s...' % c['filename'])
            shutil.copy(os.path.join(archive_dir, c['filename']), raw_dir)
            try:
                time.sleep(DOWNLOAD_TIME)
            except KeyboardInterrupt:
                logging.info('quitting...')
                return

        if not catalog:
            for f in logs:
              logging.info('copying %s...', f)
              shutil.copy(os.path.join(archive_dir, f), raw_dir)
            logging.info('done copying files')
            return

        try:
            downloading_time = (datetime.datetime.now() - now).total_seconds()
            time.sleep(60 * batch_time - downloading_time)
        except KeyboardInterrupt:
            logging.info('quitting...')
            return


if __name__ == '__main__':
    name = 'Realtime KCor pipeline simulator'
    parser = argparse.ArgumentParser(description=name)
    archivedir_help = '''source directory of data files'''
    parser.add_argument('archivedir', type=str, help=archivedir_help)
    raw_dir_help = '''destination for copying, the default is the
                      current directory'''
    parser.add_argument('--raw-dir', type=str, help=raw_dir_help)
    batch_time_help = '''number of minutes between copies, default is 3
                         minutes'''
    parser.add_argument('--batch-time',
                        type=int,
                        help=batch_time_help,
                        default=3)
    args = parser.parse_args()

    raw_dir = os.getcwd() if args.raw_dir is None else args.archive_dir
    download_loop(args.archivedir, raw_dir, args.batch_time)
