#!/opt/local/bin/perl
#-------------------------------------------------------------------------------
# rdokcorl1: pipeline handler for kcor L1 processing.
#-------------------------------------------------------------------------------
# usage: rdokcorl1 yyyymmdd
#-------------------------------------------------------------------------------
# Andrew L. Stanger   HAO/NCAR		14 January 2015
#
# kcorqsc.pro	input: kcor L0 fits files; output: lists of L0 fits files,
#               according to quality assessment.
#
# kcorl1.pro	peforms L1 processing of L0 FITS files.
#-------------------------------------------------------------------------------
# 04 Feb 2015 Add append keyword to kcorq.pro and kcorl1g.pro.
# 07 Feb 2015 Compress L1 FITS files.  Check if "ok" directory is empty.
# 08 Feb 2015 Exit if list_l0 file exists in raw directory. 
#             [previous process is assumed to be active.]
#             Exit if no   L0 files exist in raw directory.
#             Print current time when dokcorl1c process starts (in log file).
# 17 Feb 2015 Write errors to a separate log file.
# 12 Mar 2015 Use kcorqs.pro to do quality assessement (list files created).
#             This version requires L0 fits files to be compressed: *.fts.gz
#             Otherwise, the L1 files will NOT be copied to the web directories.
# 31 Mar 2015 Unzip L0 fits files (if zipped files exist) in date directory.
# 03 Apr 2015 Remove q sub-directory references (q/ok & q/oks).
# 06 Apr 2015 Change name of ok fits.gz files to 'okl1gz.ls'.
# 09 Apr 2015 Use kcorl1s.pro (instead of kcorl1g.pro).
# 13 Apr 2015 Use kcorqsc.pro (instead of kcorqs.pro).
# 05 May 2015 Remove $okf_list file when processing is done.
# 01 Jun 2015 Use level1 sub-directory for Level 1 data.
# 13 Jul 2015 NRGF files go to /hao/acos/nrgf/year/month/day directories.
#             Previously, the NRGF files were stored in /hao/acos/nrgf/yyyymmdd.
# 15 Jul 2015 Temporarily also copy NRGF files to /hao/acos/nrgf/yyyymmdd.
# 05 Nov 2015 Use kcorl1v.pro, which adds keywords to FITS header.
# 01 Dec 2015 Stop writing nrgf files to /hao/acos/nrgf/yyyymmdd directory.
#             Write 'end of kcorl1v' message in error log file.
# 09 Dec 2015 Replace kcorl1v with kcorl1.
# 16 Dec 2015 For re-processing only.  Do NOT send NRGF files to MLSO.
# 01 Mar 2016 Modify Location of NRGF gifs:
#             /hao/acos/fullres/year/month/day directories.
#-------------------------------------------------------------------------------

use File::Copy ;
use Cwd ;

print (     "rdokcorl1\n") ;

#print ("numargs: $numargs\n") ;
#print ("argv[0]: $ARGV[0]\n") ;

#--- Set up environment.

#system ("source /home/stanger/.tcshrc\n") ;

#--- Command syntax reminder.

if ($numargs != 0)
    {
    print ("\n") ;
    print ("Usage: rdokcorl1 <yyyymmdd>`\n") ;
    exit (1) ;
    }

#--- Get date parameter.

$date = $ARGV[0] ;

#--- Get current date & time.

my ($sec,$min,$hour,$mday,$mon,$cyear,$wday,$yday,$isdst) = localtime (time) ;
my @month_name = qw (Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec) ;
$cyear += 1900 ;
$cmonth = $mon + 1 ;

my $datenow = sprintf ("%04d%02d%02d", $cyear, $cmonth, $mday) ;
my $timenow = sprintf ("%02d%02d%02d", $hour, $min, $sec) ;

my $datestr = sprintf ("%02d-%s-%04d", $mday, $month_name[$mon], $cyear) ;
my $timestr = sprintf ("%02d:%02d:%02d", $hour, $min, $sec) ;

#$date = $datenow;		# Process today's kcor L0 data.

#--- Define directory path names.

$date_dir  = "/hao/mlsodata1/Data/KCor/raw/$date" ;	# L0 fits files.
$l0_dir    = "$date_dir/level0" ;			# L0 fits files.
$l1_dir    = "$date_dir/level1" ;			# L1 fits & gif files.

$q_dir     = "$date_dir/q" ;				# q   L0 gif files.

#$ok_dir    = "$date_dir/q/ok" ;			# ok  L0 gif files.
#$oks_dir   = "$date_dir/q/oks" ;			# oks L0 gif files.

$okcg_list = "okcgif.ls" ;
$okfg_list = "okfgif.ls" ;
$okl1_list = "okl1gz.ls" ;
$okrg_list = "oknrgf.ls" ;

#--- Check existence of directories.

unless (-e $date_dir)
   {
   die "Directory $date_dir does not exist.  $!\n" ;
   }

unless (-e $l0_dir or mkdir ($l0_dir, 0775))
   {
   die "Unable to create directory $l0_dir.  $!\n" ;
   }

unless (-e $l1_dir or mkdir ($l1_dir, 0775))
   {
   die "Unable to create directory $l1_dir.  $!\n" ;
   }

unless (-e $q_dir or mkdir ($q_dir, 0775))
   {
   die "Unable to create directory $q_dir.  $!\n" ;
   }

#--- Open error log file (with a unique, time-based name).

$elogfile = $l1_dir . '/' . $datenow . "_" . $timenow . "_rdokcorl1err.log" ;
print ("elogfile: $elogfile\n") ;

open  (ELOG, ">$elogfile") or die "Unable to open $elogfile.  $!" ;
print (ELOG "--- Error Log: rdokcorl1 $date --- current time: $datestr $timestr ---\n") ;

#--- Extract year, month & day from date parameter.

$year  = substr $date, 0, 4 ;			# year
$month = substr $date, 4, 2 ;			# month
$day   = substr $date, 6, 2 ;			# day of month

#--- Define "web" data directories.

$okcgif_web  = "/hao/ftp/$year/$month/$day" ;		# cropped  gif web dir.
$okfgif_web  = "/hao/acos/fullres/$year/$month/$day" ;	# full res gif web dir.
$okl1fts_web = "/hao/acos/$year/$month/$day" ;		# L1 fits      web dir.

#--- Move to kcor date directory: [/hao/mlsodata1/Data/KCor/raw/yyyymmdd]. -----

my $pwd = cwd () ;				# save current directory path.
print ("pwd    : $pwd\n") ;
print ("date_dir: $date_dir\n") ;

chdir ($date_dir) ;

#--- If "$l0_list" exists, a previous 'rdokcorl1*' process is active.
#    In that case, exit, since it is inappropriate for two processes
#    to be running simultaneously.

$l0_list  = 'list_l0' ;			# All new kcor L0 fits files.
$okf_list = 'list_okf' ;		# ok  new kcor L0 fits files.
$okf_path = $date_dir . '/' . $okf_list ;

if (-e $l0_list)
   {
   print (     "*** warning *** File $l0_list exists in $date_dir.\n") ;
   print (     "    Only one process at a time is allowed.\n") ;
   print (     "*** end of rdokcorl1 ***\n") ;

   print (ELOG "*** warning *** File $l0_list exists in $date_dir.\n") ;
   print (ELOG "    Only one process at a time is allowed.\n") ;
   print (ELOG "*** end of rdokcorl1 ***\n") ;
   close (ELOG);

   die "Previous rdokcorl1 process apparently active. $!\n" ;
   }

#--- Unzip kcor L0 fits files (if they exist) in date directory.
    
print  (     "/bin/gunzip *.fts.gz\n") ;
print  (ELOG "/bin/gunzip *.fts.gz\n") ;
system (     "/bin/gunzip *.fts.gz\n") ;

#--- Create a list of current L0 fits files in date directory.

@l0_fits_files = `ls -1 *_*kcor.fts` ;
chomp (@l0_fits_files) ;

#--- Check size of L0 FITS file list.
#    Quit if there are no FITS files to process.

my $l0_size = @l0_fits_files ;
if ($l0_size == 0)
   {
   print (     "    No L0 files to process in $date_dir.\n") ;
   print (     "*** end of rdokcorl1 ***\n") ;

   print (ELOG "    No L0 files to process in $date_dir.\n") ;
   print (ELOG "*** end of rdokcorl1 ***\n") ;
   close (ELOG) ;
   die "$!\n" ;
   }

#--- Open log file (append mode).

$logfile = $l1_dir . '/' . $date . "_rdokcorl1.log" ;
print ("logfile: $logfile\n") ;

open (LOG, ">>$logfile") or die "Unable to open $logfile $!" ;

#--- Print start time of process.

print (    "--- rdokcorl1  $date ---  start time: $datestr  $timestr ---\n") ;
print (LOG "--- rdokcorl1  $date ---  start time: $datestr  $timestr ---\n") ;

#--- Write the list to a file.

my $num_l0_files = 0 ;

open (L0_FITS, ">$l0_list") or die "Unable to open $l0_list $!" ;
foreach $f (@l0_fits_files)
   {
   if ($f)
      {
      $num_l0_files += 1 ;
      print (        "$f\n") ;
      print (LOG     "$f\n") ;
      print (L0_FITS "$f\n") ;
      }
   }
close (L0_FITS) ;

print (    "num_l0_files: $num_l0_files\n") ;
print (LOG "num_l0_files: $num_l0_files\n") ;

#-------------------------------------------------------------------------------
# Perform quality assessment, using L0 Fits files.
# Note: kcorqsc creates a list of OK fits files in "$okf_list".
#
# Peform L1 processing on L0 kcor fits files.
# Note: kcorl1v creates fits, fullres gif, cropped gif & nrgf gif files.

$idlfile = 'idlcmd' ;
open  (IDLCMD, ">$idlfile") or die "Unable to open $idlfile $!" ;
print (       "kcorqsc, '$date', list='$l0_list', /append\n") ;
print (LOG    "kcorqsc, '$date', list='$l0_list', /append\n") ;
print (IDLCMD "kcorqsc, '$date', list='$l0_list', /append\n") ;

print (       "kcorl1, '$date', list='$okf_list', /append\n") ;
print (LOG    "kcorl1, '$date', list='$okf_list', /append\n") ;
print (IDLCMD "kcorl1, '$date', list='$okf_list', /append\n") ;

close (IDLCMD) ;

#--- Execute IDL procedure calls in "$idlfile" text file.

system ("/opt/share/exelis/idl/bin/idl < $idlfile\n") == 0
        or die "system (idl < $idlfile) failed: $?" ;
#-------------------------------------------------------------------------------

#--- Move processed L0 FITS files to 'level0' directory.

print  ("mv `cat $l0_list` $l0_dir\n") ;
system ("mv `cat $l0_list` $l0_dir\n") ;

#--- Move to "$l1_dir" directory. ----------------------------------------------

chdir ($l1_dir) ;

#--- Create a list of current L1 fits files in "$l1_dir" directory.

#@l1_fits_files = `ls -1 *kcor_l1.fts` ;
#chomp (@l1_fits_files) ;
#
#my $l1_size = @l1_fits_files ;	# Get size of L1 fits file list.
#
#--- Compress the L1 FITS files (if any exist).
#
#if ($l1_size != 0)
#   {
#   foreach $f (@l1_fits_files)
#      {
#      print  (    "/bin/gzip  $f\n");
#      print  (LOG "/bin/gzip  $f\n");
#      system (    "/bin/gzip  $f\n");	# compress L1 FITS file.
#      }
#   }

print  (    "/bin/gzip  *l1.fts\n") ;
print  (LOG "/bin/gzip  *l1.fts\n") ;
system (    "/bin/gzip  *l1.fts\n") ;

#--- If "$okf_path" file is empty, terminate program.

my $okf_size = -s $okf_path ;		# size of $okf_path file.
if ($okf_size == 0)
   {
   print (LOG "$okf_path is empty.  No files to archive.\n") ;
   goto DONE ;
   }

#--- Open "$okf_path" file.

open (my $fh, "<$okf_path") ;
open (OKCG, ">>$okcg_list") or die "Unable to open $okcg_list $!" ;
open (OKFG, ">>$okfg_list") or die "Unable to open $okfg_list $!" ;
open (OKL1, ">>$okl1_list") or die "Unable to open $okl1_list $!" ;
#open (OKRG, ">>$okrg_list") or die "Unable to open $okrg_list $!" ;

#--- Create lists of "ok" cropped, full resolution, and L1 FITS files.
#--- Copy "ok" L1 images to web directories & lobby display directories.
#    NOTE: This will ONLY work when the "$okf_path" contains fts.gz file names.

$okf_file = 'unknown' ;
while (my $okf_file = <$fh>)
   {
   chomp $okf_file ;			# remove carriage return.

   (my $okcgif_file = $okf_file) =~ s/.fts/_cropped.gif/ ;
   (my $okfgif_file = $okf_file) =~ s/.fts/.gif/ ;
   (my $okl1gz_file = $okf_file) =~ s/kcor.fts/kcor_l1.fts.gz/ ;
   (my $oknrgf_file = $okf_file) =~ s/kcor.fts/kcor_l1_nrgf.gif/ ;

   #--- Write to "ok" list files.

   print (OKCG "$okcgif_file\n") ;
   print (OKFG "$okfgif_file\n") ;
   print (OKL1 "$okl1gz_file\n") ;
#   print (OKRG "$oknrgf_file\n") ;

   #--- Copy L1 cropped gif files to lobby display directories.

#   print (    "copy ($okcgif_file,  $mesa__dir)\n") ;
#   print (    "copy ($okcgif_file,  $cg11__dir)\n") ;
#   print (LOG "copy ($okcgif_file,  $mesa__dir)\n") ;
#   print (LOG "copy ($okcgif_file,  $cg11__dir)\n") ;
#   copy ($okcgif_file,  $mesa_dir) ;
#   copy ($okcgif_file,  $cg11_dir) ;

   #--- Copy "ok" files to web directories.

   print (    "copy ($okcgif_file,  $okcgif_web)\n") ;
   print (    "copy ($okfgif_file,  $okfgif_web)\n") ;
   print (    "copy ($okl1gz_file,  $okl1fts_web)\n") ;

   print (LOG "copy ($okcgif_file,  $okcgif_web)\n") ;
   print (LOG "copy ($okfgif_file,  $okfgif_web)\n") ;
   print (LOG "copy ($okl1gz_file,  $okl1fts_web)\n") ;

   copy ($okcgif_file,  $okcgif_web) ;		# cropped gif  web directory.
   copy ($okfgif_file,  $okfgif_web) ;		# fullres gif  web directory.
   copy ($okl1gz_file,  $okl1fts_web) ;		# L1      fits web directory.
   }

close (OKCG) ;
close (OKFG) ;
close (OKL1) ;
#close (OKRG) ;

#-------------------------------------------------------------------------------
# NRGF file disperal.
#-------------------------------------------------------------------------------

#--- Create sub-directory  (/hao/mlsodata1/Data/raw/kcor/$date/level1/$date).
#--- Also create $nrgf_date_dir (/hao/acos/fullres/$year/$month/$day).

$nrgf_base_dir   = '/hao/acos/fullres/' ;

$nrgf_year_dir   = $nrgf_base_dir  . $year ;
$nrgf_month_dir  = $nrgf_year_dir  . '/' . $month ;
$nrgf_day_dir    = $nrgf_month_dir . '/' . $day ;

$nrgf_remote_dir = '/export/data1/instruments/gallery/kcor' ;
$mlso_computer   = 'mlsoserver.mlso.ucar.edu' ;

unless (-e $nrgf_base_dir or mkdir ($nrgf_base_dir, 0775))
   {
   print (LOG "Unable to create directory $nrgf_base_dir\n");
   die "Unable to create directory $nrgf_base_dir.  $!\n" ;
   }

# Original location of radially-graded gifs: /hao/acos/nrgf/$date.
#
# $nrgf_date_dir   = $nrgf_base_dir  . $date ;
#
# unless (-e $nrgf_date_dir or mkdir ($nrgf_date_dir, 0775))
#   {
#   die "Unable to create directory $nrgf_date_dir.  $!\n" ;
#   }

unless (-e $nrgf_year_dir or mkdir ($nrgf_year_dir, 0775))
   {
   print (LOG "Unable to create directory $nrgf_year_dir\n");
   die "Unable to create directory $nrgf_year_dir.  $!\n" ;
   } 

unless (-e $nrgf_month_dir or mkdir ($nrgf_month_dir, 0775))
   {
   print (LOG "Unable to create directory $nrgf_month_dir\n");
   die "Unable to create directory $nrgf_month_dir.  $!\n" ;
   } 

unless (-e $nrgf_day_dir or mkdir ($nrgf_day_dir, 0775))
   {
   print (LOG "Unable to create directory $nrgf_day_dir\n");
   die "Unable to create directory $nrgf_day_dir.  $!\n" ;
   } 

#--- Copy nrgf gif files to mlsoserver (MLSO).

#print  (    "scp -B -r -p *nrgf.gif $mlso_computer:$nrgf_remote_dir\n") ;
#print  (LOG "scp -B -r -p *nrgf.gif $mlso_computer:$nrgf_remote_dir\n") ;
#system (    "scp -B -r -p *nrgf.gif $mlso_computer:$nrgf_remote_dir\n") ;

#print  (    "cp *nrgf.gif $nrgf_date_dir\n") ;
#print  (LOG "cp *nrgf.gif $nrgf_date_dir\n") ;
#system (    "cp *nrgf.gif $nrgf_date_dir\n") ;

#--- Move nrgf gif files to web repository.

print  (    "mv *nrgf.gif $nrgf_day_dir\n") ;
print  (LOG "mv *nrgf.gif $nrgf_day_dir\n") ;
system (    "mv *nrgf.gif $nrgf_day_dir\n") ;

#-------------------------------------------------------------------------------
# Note: At this point, no nrgf files should remain in the $l1_dir,
# since they have been moved to the web repository (/hao/acos/nrgf/yyyy/mm/dd).
# Therefore, the next time this PERL program is executed, only NEW nrgf files
# will be deposited into the $l1_dir.
#-------------------------------------------------------------------------------

#--- Remove IDL command file and L0 fits list file.

DONE:
chdir ($date_dir) ;

unlink ("$idlfile") ;
unlink ("$l0_list") ;
unlink ("$okf_list") ;

#--- Get current date & time.

my ($sec,$min,$hour,$mday,$mon,$cyear,$wday,$yday,$isdst) = localtime (time);
my @month_name = qw (Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec);
$cyear += 1900;
$cmonth = $mon + 1;

my $datenow = sprintf ("%04d%02d%02d",   $cyear, $cmonth, $mday);
my $timenow = sprintf ("%02d:%02d:%02d", $hour, $min, $sec);

my $datestr = sprintf ("%02d-%s-%04d", $mday, $month_name[$mon], $cyear);
my $timestr = sprintf ("%02d:%02d:%02d", $hour, $min, $sec);

print (    "--- rdokcorl1  $date ---  end   time: $datestr  $timestr --- $num_l0_files\n");
print (LOG "--- rdokcorl1  $date ---  end   time: $datestr  $timestr --- $num_l0_files\n");

print (     "*** end of rdokcorl1 ***\n") ;
print (LOG  "*** end of rdokcorl1 ***\n") ;
print (ELOG "*** end of rdokcorl1 ***\n") ;
close (LOG) ;
close (ELOG) ;

#--- Return to original directory.

chdir ($pwd) ;
