#!/opt/local/bin/perl
#-------------------------------------------------------------------------------
# cpkcorl1r yyyymmdd
#-------------------------------------------------------------------------------
# Copy kcor L1 files from temporary to permanent directories.
# The MLSO web site looks for files in these local archive directories.
#-------------------------------------------------------------------------------
# Andrew L. Stanger   HAO/NCAR
# 6 January 2015 [cpkcor]
# 9 Jan 2015: Generate a log file: yyyymmdd_cpkcor.log
#             Generate lists of web archive files:
#                okcgif.ls		cropped  gif files
#                okfgif.ls		full res gif files
#                okl1gz.ls		L1 fits      files
# 23 Jan 2015: Use levelg files [instead of level1].
# 05 Apr 2015: Use oka.ls file in q directory (generated by kcorqs.pro).
# 30 May 2015: Adapt for kcorl1r.pro.
#  1 Jun 2015: Use level 1 sub-directory for Level 1 data.
#-------------------------------------------------------------------------------

use File::Copy;
use Cwd;

@months = ("01","02","03","04","05","06","07","08","09","10","11","12");

#print ("cpkcorl1  $ARGV[0]\n");
$numargs = @ARGV;

#print ("numargs: $numargs\n");
#print ("argv[0]: $ARGV[0]\n");

#-------------------------
# Command syntax reminder.
#-------------------------

if ($numargs != 1)
    {
    print ("\n");
    print ("Usage: cpkcorl1  <yyyymmdd>\n");
    print ("yyyy: year   mm: month  dd: day of month\n");
    exit (1);
    }

#--------------------
# Get date parameter.
#--------------------

$date = $ARGV[0];

#print (     "date:       $date\n");

#--- Extract year, month & day from date parameter.

$year = substr $date, 0, 4;			# year
$mon  = substr $date, 4, 2;			# month
$day  = substr $date, 6, 2;			# day of month

#-----------------------------
# Define directory path names.
#-----------------------------

$date_dir = "/hao/mlsodata1/Data/KCor/raw/$date";	# L0 fits files.
$l1_dir   = "$date_dir/level1";				# L1 fits & gif files.
$q_dir    = "$date_dir/q";				# quality directory.
$ok_list  = "oka.ls";			# list of ok files from kcorqs.pro
$ok_path  = $q_dir . '/' . $ok_list ;

$cgif_dir = "/hao/ftp/$year/$mon/$day";			# cropped gif files
$fgif_dir = "/hao/acos/fullres/$year/$mon/$day";	# fullres gif files
$l1w_dir  = "/hao/acos/$year/$mon/$day";		# L1 fits files

#---------------
# Open log file.
#---------------

$logfile = $l1_dir . '/' . $date . "_cpkcorl1.log";
open  (LOG, ">$logfile");

print (    "cpkcorl1  $date\n");
print (LOG "cpkcorl1  $date\n");

print (    "year: $year   month: $mon   day: $day\n");
print (LOG "year: $year   month: $mon   day: $day\n");

my $pwd = cwd ();		# current directory.

print (    "pwd     : $pwd\n");
print (LOG "pwd     : $pwd\n");

#-------------------------------------------
# Check existence of level1 & q directories.
#-------------------------------------------

unless (-e $l1_dir)
   {
   print (    "$l1_dir does not exist.  Execute kcorl1r.pro and try again.\n");
   print (LOG "$l1_dir does not exist.  Execute kcorl1r.pro and try again.\n");
   die "Directory $l1_dir does not exist.\n";
   }

unless (-e $q_dir)
   {
   print (    "$q_dir does not exist.  Execute kcorqs.pro and try again.\n");
   print (LOG "$q_dir does not exist.  Execute kcorqs.pro and try again.\n");
   die "Directory $q_dir does not exist.\n";
   }

unless (-e $ok_path)
   {
   print (    "$ok_path does not exist.  Execute kcorqs.pro and try again.\n");
   print (LOG "$ok_path does not exist.  Execute kcorqs.pro and try again.\n");
   die "Directory $ok_path does not exist.\n";
   }

print (    "date_dir: $date_dir\n");
print (    "l1_dir:   $l1_dir\n");
print (    "q_dir:    $q_dir\n");
print (    "ok_list:  $ok_list\n");

print (    "cgif_dir: $cgif_dir\n");
print (    "fgif_dir: $fgif_dir\n");
print (    "l1w_dir:  $l1w_dir\n");

print (LOG "date_dir: $date_dir\n");
print (LOG "l1_dir:   $l1_dir\n");
print (LOG "q_dir:    $q_dir\n");
print (LOG "ok_list:  $ok_list\n");

print (LOG "cgif_dir: $cgif_dir\n");
print (LOG "fgif_dir: $fgif_dir\n");
print (LOG "l1w_dir:  $l1w_dir\n");

#------------------------------------------------------
# Move to q directory.
# Read list of the "ok" files (produced by kcorqs.pro).
#------------------------------------------------------

chdir ($q_dir);

print (    "cd $q_dir\n");
print (    "Get files to process from $ok_list\n") ;

print (LOG "cd $q_dir\n");
print (LOG "Get files to process from $ok_list\n") ;

#@ok_files = `ls -1 *.gif`;
@ok_files = `cat oka.ls` ;

#print ("ok_files:\n");
#print ("@ok_files\n");

#-----------------------------
# Remove line feed characters.
#-----------------------------

chomp (@ok_files);

#--------------------------
# Move to level1 directory.
#--------------------------

chdir ($l1_dir);

print (    "cd $l1_dir\n");
print (LOG "cd $l1_dir\n");

# --- Compress the L1 fits files.

print  (    "gzip *l1.fts\n");
print  (LOG "gzip *l1.fts\n");

system ("gzip *l1.fts\n");

#-------------------------------------------------------------------------------
# Copy files to web archive directories.
#-------------------------------------------------------------------------------

#------------------------
# Cropped gif file loop :
#------------------------

foreach $f (@ok_files)
   {
   $kcor_base = substr $f, 0, 20 . '_cropped.gif' ;
   $cgif_file = $kcor_base . '_cropped.gif' ;
   print  (    "cp  $cgif_file  $cgif_dir\n");
   print  (LOG "cp  $cgif_file  $cgif_dir\n");
   system (    "cp  $cgif_file  $cgif_dir\n");
   }

#--- Create a list of the cropped gif files in web repository directory.

chdir  ($cgif_dir);
system ("ls *kcor* > $l1_dir/okcgif.ls\n");
chdir  ($l1_dir);

#-------------------------------
# Full resolution gif file loop:
#-------------------------------

foreach $f (@ok_files)
   {
   $kcor_base = substr $f, 0, 20 . '_cropped.gif' ;
   $fgif_file = $kcor_base . '.gif' ;
   print  (    "cp  $fgif_file  $fgif_dir\n");
   print  (LOG "cp  $fgif_file  $fgif_dir\n");
   system (    "cp  $fgif_file  $fgif_dir\n");
   }

#--- Create a list of the fullres gif files in web repository directory.

chdir  ($fgif_dir);
system ("ls *kcor* > $l1_dir/okfgif.ls\n");
chdir  ($l1_dir);

#--------------------
# L1 fits file loop :
#--------------------

foreach $f (@ok_files)
   {
   $kcor_base = substr $f, 0, 20 . '_cropped.gif' ;
   $l1gz_file   = $kcor_base . '_l1.fts.gz' ;
   print  (    "cp  $l1gz_file   $l1w_dir\n");
   print  (LOG "cp  $l1gz_file   $l1w_dir\n");
   system (    "cp  $l1gz_file   $l1w_dir\n");
   }

#--- Create a list of the L1 fits files in web repository directory.

chdir  ($l1w_dir);
system ("ls *kcor* > $l1_dir/okl1gz.ls\n");
chdir  ($l1_dir);

#-------------------------------------------------------------------------------
print (    "*** end of cpkcorl1 ***\n");
print (LOG "*** end of cpkcorl1 ***\n");
close (LOG);
