#!/usr/bin/env python

import argparse
import base64
import os
import sys

PY3 = sys.version_info > (3, 0)

if PY3:
    from io import BytesIO as IO
else:
    from StringIO import StringIO as IO

from astropy.io import fits
import numpy as np
from PIL import Image

quallab = ((  0,   0,   0,   0),
      (  1,   0,   0,   8),
      (  2,   0,   0,  16),
      (  3,   0,   0,  24),
      (  4,   0,   0,  30),
      (  5,   0,   0,  33),
      (  6,   0,   0,  39),
      (  7,   0,   0,  45),
      (  8,   0,   0,  50),
      (  9,   0,   0,  55),
      ( 10,   0,   0,  59),
      ( 11,   0,   0,  63),
      ( 12,   0,   0,  67),
      ( 13,   0,   0,  71),
      ( 14,   1,   1,  74),
      ( 15,   2,   2,  78),
      ( 16,   2,   2,  81),
      ( 17,   3,   3,  84),
      ( 18,   5,   5,  87),
      ( 19,   6,   6,  90),
      ( 20,   7,   7,  93),
      ( 21,   9,   9,  95),
      ( 22,  10,  10,  98),
      ( 23,  12,  12, 100),
      ( 24,  14,  14, 103),
      ( 25,  15,  15, 105),
      ( 26,  17,  17, 108),
      ( 27,  19,  19, 110),
      ( 28,  20,  20, 112),
      ( 29,  22,  22, 114),
      ( 30,  23,  23, 116),
      ( 31,  25,  25, 118),
      ( 32,  26,  26, 120),
      ( 33,  28,  28, 122),
      ( 34,  29,  29, 124),
      ( 35,  31,  31, 125),
      ( 36,  33,  33, 127),
      ( 37,  34,  34, 129),
      ( 38,  36,  36, 130),
      ( 39,  37,  37, 132),
      ( 40,  39,  39, 134),
      ( 41,  40,  40, 135),
      ( 42,  42,  42, 137),
      ( 43,  43,  43, 138),
      ( 44,  45,  45, 140),
      ( 45,  46,  46, 141),
      ( 46,  48,  48, 142),
      ( 47,  49,  49, 144),
      ( 48,  50,  50, 145),
      ( 49,  52,  52, 146),
      ( 50,  53,  53, 148),
      ( 51,  55,  55, 149),
      ( 52,  56,  56, 150),
      ( 53,  58,  58, 152),
      ( 54,  59,  59, 153),
      ( 55,  61,  61, 154),
      ( 56,  62,  62, 155),
      ( 57,  63,  63, 156),
      ( 58,  65,  65, 157),
      ( 59,  66,  66, 158),
      ( 60,  67,  67, 159),
      ( 61,  69,  69, 161),
      ( 62,  70,  70, 162),
      ( 63,  72,  72, 163),
      ( 64,  73,  73, 164),
      ( 65,  74,  74, 165),
      ( 66,  76,  76, 166),
      ( 67,  77,  77, 167),
      ( 68,  78,  78, 168),
      ( 69,  80,  80, 169),
      ( 70,  81,  81, 170),
      ( 71,  83,  83, 171),
      ( 72,  84,  84, 172),
      ( 73,  85,  85, 173),
      ( 74,  86,  86, 174),
      ( 75,  88,  88, 174),
      ( 76,  89,  89, 175),
      ( 77,  90,  90, 176),
      ( 78,  92,  92, 177),
      ( 79,  93,  93, 178),
      ( 80,  94,  94, 179),
      ( 81,  96,  96, 180),
      ( 82,  97,  97, 181),
      ( 83,  98,  98, 181),
      ( 84,  99,  99, 182),
      ( 85, 101, 101, 183),
      ( 86, 102, 102, 184),
      ( 87, 103, 103, 185),
      ( 88, 104, 104, 185),
      ( 89, 106, 106, 186),
      ( 90, 107, 107, 187),
      ( 91, 108, 108, 188),
      ( 92, 109, 109, 188),
      ( 93, 111, 111, 189),
      ( 94, 112, 112, 190),
      ( 95, 113, 113, 191),
      ( 96, 114, 114, 191),
      ( 97, 116, 116, 192),
      ( 98, 117, 117, 193),
      ( 99, 118, 118, 193),
      (100, 119, 119, 194),
      (101, 120, 120, 195),
      (102, 122, 122, 196),
      (103, 123, 123, 196),
      (104, 124, 124, 197),
      (105, 125, 125, 198),
      (106, 126, 126, 198),
      (107, 128, 128, 199),
      (108, 129, 129, 200),
      (109, 130, 130, 200),
      (110, 131, 131, 201),
      (111, 132, 132, 201),
      (112, 133, 133, 202),
      (113, 135, 135, 203),
      (114, 136, 136, 203),
      (115, 137, 137, 204),
      (116, 138, 138, 205),
      (117, 139, 139, 205),
      (118, 140, 140, 206),
      (119, 141, 141, 206),
      (120, 143, 143, 207),
      (121, 144, 144, 208),
      (122, 145, 145, 208),
      (123, 146, 146, 209),
      (124, 147, 147, 209),
      (125, 148, 148, 210),
      (126, 149, 149, 210),
      (127, 150, 150, 211),
      (128, 152, 152, 211),
      (129, 153, 153, 212),
      (130, 154, 154, 213),
      (131, 155, 155, 213),
      (132, 156, 156, 214),
      (133, 157, 157, 214),
      (134, 158, 158, 215),
      (135, 159, 159, 215),
      (136, 160, 160, 216),
      (137, 161, 161, 216),
      (138, 163, 163, 217),
      (139, 164, 164, 217),
      (140, 165, 165, 218),
      (141, 166, 166, 218),
      (142, 167, 167, 219),
      (143, 168, 168, 219),
      (144, 169, 169, 220),
      (145, 170, 170, 220),
      (146, 171, 171, 221),
      (147, 172, 172, 221),
      (148, 173, 173, 222),
      (149, 174, 174, 222),
      (150, 175, 175, 223),
      (151, 176, 176, 223),
      (152, 177, 177, 224),
      (153, 179, 179, 224),
      (154, 180, 180, 224),
      (155, 181, 181, 225),
      (156, 182, 182, 225),
      (157, 183, 183, 226),
      (158, 184, 184, 226),
      (159, 185, 185, 227),
      (160, 186, 186, 227),
      (161, 187, 187, 228),
      (162, 188, 188, 228),
      (163, 189, 189, 229),
      (164, 190, 190, 229),
      (165, 191, 191, 229),
      (166, 192, 192, 230),
      (167, 193, 193, 230),
      (168, 194, 194, 231),
      (169, 195, 195, 231),
      (170, 196, 196, 232),
      (171, 197, 197, 232),
      (172, 198, 198, 232),
      (173, 199, 199, 233),
      (174, 200, 200, 233),
      (175, 200, 200, 234),
      (176, 201, 201, 234),
      (177, 202, 202, 234),
      (178, 203, 203, 235),
      (179, 204, 204, 235),
      (180, 205, 205, 236),
      (181, 206, 206, 236),
      (182, 207, 207, 236),
      (183, 208, 208, 237),
      (184, 209, 209, 237),
      (185, 210, 210, 238),
      (186, 211, 211, 238),
      (187, 212, 212, 238),
      (188, 213, 213, 239),
      (189, 214, 214, 239),
      (190, 215, 215, 239),
      (191, 215, 215, 240),
      (192, 216, 216, 240),
      (193, 217, 217, 241),
      (194, 218, 218, 241),
      (195, 219, 219, 241),
      (196, 220, 220, 242),
      (197, 221, 221, 242),
      (198, 222, 222, 242),
      (199, 223, 223, 243),
      (200, 224, 224, 243),
      (201, 225, 225, 244),
      (202, 225, 225, 244),
      (203, 226, 226, 244),
      (204, 227, 227, 245),
      (205, 228, 228, 245),
      (206, 229, 229, 245),
      (207, 230, 230, 246),
      (208, 231, 231, 246),
      (209, 232, 232, 246),
      (210, 233, 233, 246),
      (211, 234, 234, 247),
      (212, 234, 234, 247),
      (213, 235, 235, 247),
      (214, 236, 236, 247),
      (215, 237, 237, 247),
      (216, 238, 238, 248),
      (217, 239, 239, 248),
      (218, 240, 240, 248),
      (219, 241, 241, 248),
      (220, 241, 241, 248),
      (221, 242, 242, 248),
      (222, 244, 244, 248),
      (223, 245, 245, 248),
      (224, 245, 245, 249),
      (225, 246, 246, 249),
      (226, 247, 247, 249),
      (227, 248, 248, 249),
      (228, 248, 248, 249),
      (229, 249, 249, 249),
      (230, 250, 250, 250),
      (231, 250, 250, 250),
      (232, 250, 250, 250),
      (233, 250, 250, 250),
      (234, 250, 250, 250),
      (235, 251, 251, 251),
      (236, 251, 251, 251),
      (237, 251, 251, 251),
      (238, 251, 251, 251),
      (239, 251, 251, 251),
      (240, 251, 251, 251),
      (241, 252, 252, 252),
      (242, 252, 252, 252),
      (243, 252, 252, 252),
      (244, 252, 252, 252),
      (245, 252, 252, 252),
      (246, 252, 252, 252),
      (247, 253, 253, 253),
      (248, 253, 253, 253),
      (249, 253, 253, 253),
      (250, 255, 255, 255),
      (251, 255, 255, 255),
      (252, 255, 255, 255),
      (253, 255, 255, 255),
      (254, 255, 255, 255),
      (255, 255, 255, 255))


def gamma_correct(r, g, b, gamma, n_colors=256):
    s = n_colors * np.power(np.arange(n_colors, dtype=np.float32) / n_colors, gamma)
    s = s.astype(np.uint8)
    return (r[s], g[s], b[s])


def default_scaling_param(cmdline, name, header):
    if cmdline is not None: return cmdline
    if name in header: return header[name]
    return None


def create_slices(slices):
    new_slices = []
    for s in slices.split(','):
        parts = s.split(':')
        if len(parts) == 1:
            start = int(parts[0]) if parts[0] != '' else None
            new_slices.append(slice(start, start + 1))
        elif len(parts) == 2:
            start = int(parts[0]) if parts[0] != '' else None
            end = int(parts[1]) if parts[1] != '' else None
            new_slices.append(slice(start, end))
        elif len(parts) == 3:
            start = int(parts[0]) if parts[0] != '' else None
            end = int(parts[1]) if parts[1] != '' else None
            stride = int(parts[2]) if parts[2] != '' else None
            new_slices.append(slice(start, end, stride))
        else:
            print('invalid slice notation: %s' % s)
            return None

    return new_slices


def byte_scale(data, min=None, max=None, exp=None, debug=False):
    '''Convert an arbitrary n-dimensional array into a unsigned byte valued
       array'''

    dims = data.shape

    if debug:
        print('%s %d x %d'% (data.dtype, dims[0], dims[1]))

    # determine min/max values to use
    min_value = float(min) if min is not None else data.min()
    max_value = float(max) if max is not None else data.max()

    if debug:
        print('min=%f, max=%f' % (min_value, max_value))

    # scale
    new_data = np.flipud(data.astype(np.float32))
    new_data = (new_data - min_value) / (max_value - min_value)

    min_ind = np.where(new_data < min_value)
    new_data[min_ind] = min_value

    max_ind = np.where(new_data > max_value)
    new_data[max_ind] = max_value

    if exp is not None:
        new_data = np.power(new_data + np.finfo(np.float32).eps, float(exp))

    new_data = 255.0 * (new_data - new_data.min()) / (new_data.max() - new_data.min())

    return new_data.astype(np.ubyte)


def apply_colortable(array, colortable, gamma):
    # read colortable and gamma correct it
    ct = np.array(colortable, dtype=np.uint8)
    r = ct[:, 1]
    g = ct[:, 2]
    b = ct[:, 3]
    (r, g, b) = gamma_correct(r, g, b, gamma)

    # apply color table to array
    r_array = r[array]
    g_array = g[array]
    b_array = b[array]

    # combine channels
    return np.stack([r_array, g_array, b_array], axis=2)


def pre_osc(screen=False):
    return '\x1bPtmux;\x1b\x1b]' if screen else '\x1b]'


def post_osc(screen=False):
    return '\a\x1b\\' if screen else '\a'


def display_image(data, debug=False):
    '''For more about the protocol to display images at the terminal in iTerm 2,
       see https://iterm2.com/documentation-images.html'''
    term = os.environ['TERM']
    screen = term.startswith('screen')

    im = Image.fromarray(data, mode='RGB')
    output = IO()
    im.save(output, 'PNG')

    im_bytes = base64.b64encode(output.getvalue())

    # a sequence of bytes in Python 2 is a string, but in Python 3 it must be
    # decoded via a Unicode encoding
    if PY3:
        im_str = im_bytes.decode('latin1')
    else:
        im_str = im_bytes

    iterm_format = '%s1337;File=inline=1;width=auto;height=auto:%s%s'
    print(iterm_format % (pre_osc(screen), im_str, post_osc(screen)))


def main():
    name = 'kcorcat @VERSION@'
    description = 'KCor file query/display program'
    parser = argparse.ArgumentParser(description='%s - %s' % (name, description))

    parser.add_argument('filename', help='FITS file to query')
    parser.add_argument('--min', type=float, default=None, help='min for scaling')
    parser.add_argument('--max', type=float, default=None, help='max for scaling')
    parser.add_argument('--exp', type=float, default=None, help='exp for scaling')
    parser.add_argument('--gamma', type=float, default=0.65, help='colortable gamma')
    parser.add_argument('--debug', action='store_true', help='set to debug')
    parser.add_argument('-d', '--display', action='store_true', help='set to display')
    parser.add_argument('-l', '--list', action='store_true', help='set to list HDUs')
    parser.add_argument('-r', '--header', action='store_true', help='set to display header')
    parser.add_argument('-s', '--slice', type=str, default=None, help='specify slice of data array to display')
    parser.add_argument('-v', '--version',
                        action='version',
                        version=name)
    
    args = parser.parse_args()

    with fits.open(args.filename) as f:
        if args.list or (not args.header and not args.display):
            f.info()

        if args.header:
            header = f[0].header
            print(repr(header))

        if args.display:
            header = f[0].header
            data = f[0].data
            ndims = len(data.shape)
            dims = data.shape

            if args.slice is not None:
                indices = create_slices(args.slice)
                data = data[tuple(indices)].squeeze()

            ndims = len(data.shape)
            if ndims != 2:
                print('bad number of dimensions: %d' % ndims)
                return

            if args.debug:
                dims = data.shape
                print('%s %d x %d'% (data.dtype, dims[0], dims[1]))

            minv = default_scaling_param(args.min, 'DISPMIN', header)
            maxv = default_scaling_param(args.max, 'DISPMAX', header)
            expv = default_scaling_param(args.exp, 'DISPEXP', header)

            byte_data = byte_scale(data, min=minv, max=maxv, exp=expv, debug=args.debug)
            byte_data = apply_colortable(byte_data, quallab, args.gamma)
            display_image(byte_data, debug=args.debug)


if __name__ == '__main__':
    main()
